<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.daeut.daeut.admin.mapper.AdminMapper">

    <resultMap type="Users" id="userMap">
        <id property="userNo" column="user_no" />
        
        <result property="userName" column="user_name" />
        <result property="userPhone" column="user_phone" />
        <result property="userBirth" column="user_birth" />
        <result property="userAddress" column="user_address" />
        <result property="userEmail" column="user_email" />
        <result property="userGender" column="user_gender" />
        <result property="userId" column="user_id" />
        <result property="userPassword" column="user_password" />
        <result property="userRegDate" column="user_reg_date" />
        <result property="userCoupon" column="user_coupon" />
        <result property="userUpdDate" column="user_upd_date" />
        <result property="enabled" column="enabled" />
        
        <collection property="authList" resultMap="authMap"></collection>
    </resultMap>

    <resultMap type="UserAuth" id="authMap">
        <result property="authNo" column="auth_no" />
        <result property="userNo" column="user_no" />
        <result property="auth" column="auth" />
    </resultMap>

    <!-- ROLE_USER만 가진 사람 가져오기 - 관리자 페이지에서 회원 관리 -->
    <select id="selectAllUsers" resultType="Users">
        SELECT 
            a.user_no, a.user_name, a.user_phone, a.user_birth, a.user_address,
            a.user_email, a.user_gender, a.user_id, a.user_password, a.user_reg_date,
            a.user_coupon, a.user_upd_date, a.enabled, a.status
        FROM 
            users a
        WHERE 
            a.status = 0
        AND
            NOT EXISTS (
                SELECT 1 
                FROM user_auth b
                WHERE b.user_no = a.user_no 
                AND b.auth NOT IN ('ROLE_USER')
            )
         LIMIT #{page.index}, #{page.rows}
    </select>

    <!-- ROLE_USER, ROLE_PARTNER만 가진 사람 가져오기 - 관리자 페이지에서 회원 관리 -->
    <select id="selectAllPartners" resultType="Partner">
        SELECT 
            a.user_no AS userNo, 
            a.user_name AS userName, 
            a.user_phone AS userPhone, 
            a.user_birth AS userBirth, 
            a.user_address AS userAddress,
            a.user_email AS userEmail, 
            a.user_gender AS userGender, 
            a.user_id AS userId, 
            a.user_password AS userPassword, 
            a.user_reg_date AS userRegDate,
            a.user_coupon AS userCoupon, 
            a.user_upd_date AS userUpdDate, 
            a.enabled, 
            a.status,
            p.partner_grade AS partnerGrade, 
            p.partner_reserve AS partnerReserve, 
            p.partner_career AS partnerCareer, 
            p.introduce
        FROM 
            users a
        LEFT JOIN 
            partner p ON a.user_no = p.user_no
        WHERE 
            a.status IN (1, 2)
            AND EXISTS (
                SELECT 1 
                FROM user_auth b
                WHERE b.user_no = a.user_no 
                AND b.auth IN ('ROLE_PARTNER', 'ROLE_USER')
            )
        LIMIT #{page.index}, #{page.rows}
    </select>

    <!-- 사용자 수를 카운트하는 쿼리 -->
    <select id="countUsers" resultType="int">
        SELECT COUNT(*)
        FROM users u
        WHERE NOT EXISTS (
            SELECT 1
            FROM user_auth b
            WHERE b.user_no = u.user_no
            AND b.auth NOT IN ('ROLE_USER')
        )
    </select>

    <!-- 사용자(관리자) 수를 카운트하는 쿼리 -->
    <select id="countPartners" resultType="int">
        SELECT COUNT(*)
        FROM users u
        WHERE 
            u.status IN (1, 2)
            AND EXISTS (
                SELECT 1 
                FROM user_auth b
                WHERE b.user_no = u.user_no 
                AND b.auth IN ('ROLE_PARTNER', 'ROLE_USER')
            )
        
    </select>

    <!-- 관리자 - 회원 선택 삭제 -->
    <delete id="deleteList">
        DELETE FROM users
        WHERE user_no IN ( ${userNoList} )
    </delete>

    <!-- 관리자 회원 조회 - user_no -->
    <select id="findUserById" resultMap="userMap">
        SELECT u.user_no
            ,u.user_name
            ,u.user_phone
            ,u.user_birth
            ,u.user_address
            ,u.user_email
            ,u.user_gender
            ,u.user_id
            ,u.user_password
            ,u.user_reg_date
            ,u.user_coupon
            ,u.user_upd_date
            ,u.enabled
            ,auth.auth
        FROM users u 
        LEFT OUTER JOIN user_auth auth ON u.user_no = auth.user_no
        WHERE u.user_no = #{userNo}
    </select>

    <!-- 관리자 회원 수정 -->
    <update id="adminUpdateUser">
        UPDATE users
        SET 
            <!-- user_password = #{userPassword}, -->
            user_name = #{userName},
            user_phone = #{userPhone},
            user_address = #{userAddress},
            user_birth = #{userBirth},
            user_upd_date = now()
        WHERE 
            user_no = #{userNo}
    </update>

    <!-- 관리자 회원 삭제 -->
    <delete id="adminDeleteUser">
        DELETE FROM users
        WHERE user_no = #{userNo}
    </delete>

    <!-- 관리자 파트너 조회 - user_no -->
    <select id="findPartnerById" resultType="Partner">
        SELECT 
            u.user_no AS userNo, 
            u.user_name AS userName, 
            u.user_phone AS userPhone, 
            u.user_birth AS userBirth, 
            u.user_address AS userAddress,
            u.user_email AS userEmail, 
            u.user_gender AS userGender, 
            u.user_id AS userId, 
            u.user_password AS userPassword, 
            u.user_reg_date AS userRegDate,
            u.user_coupon AS userCoupon, 
            u.user_upd_date AS userUpdDate, 
            u.enabled AS enabled, 
            u.status AS status,
            p.partner_grade AS partnerGrade, 
            p.partner_reserve AS partnerReserve, 
            p.partner_career AS partnerCareer, 
            p.introduce
        FROM 
            users u
        LEFT JOIN 
            partner p ON u.user_no = p.user_no
        WHERE 
            u.status IN (1, 2)
            AND EXISTS (
                SELECT 1 
                FROM user_auth b
                WHERE b.user_no = u.user_no 
                AND b.auth IN ('ROLE_PARTNER', 'ROLE_USER')
            )
        AND u.user_no = #{userNo}
    </select>

    <!-- 관리자 파트너 수정 -->
    <update id="adminUpdatePartner">
        UPDATE users u
        JOIN partner p ON u.user_no = p.user_no
        SET u.user_name = #{userName}, 
            u.user_phone = #{userPhone}, 
            u.user_address = #{userAddress}, 
            u.user_upd_date = now(), 
            p.partner_career = #{partnerCareer}, 
            p.introduce = #{introduce}
        WHERE u.user_no = #{userNo};
    </update>

    <!-- 파트너 승인 -->
    <update id="approvePartner">
        UPDATE users
        SET status = 2
        WHERE user_id = #{userId}
    </update>

    <!-- 파트너 권한 추가 -->
    <insert id="insertPartnerAuth">
        INSERT INTO user_auth( user_no, auth )
        VALUES ( (SELECT user_no FROM users WHERE user_id = #{userId}), 'ROLE_PARTNER' )
    </insert>

    <!-- 파트너 승인 취소 -->
    <update id="cancelPartner">
        UPDATE users
        SET status = 0
        WHERE user_id = #{userId}
    </update>

    <!-- 파트너 권한 회수 -->
    <delete id="deletePartnerAuth">
        DELETE FROM user_auth
        WHERE user_no = (SELECT user_no FROM users WHERE user_id = #{userId})
        AND auth = 'ROLE_PARTNER'
    </delete>

    <!-- 예약된 수를 카운트하는 쿼리 -->
    <select id="countReservations" resultType="int">
        SELECT COUNT(*)
        FROM orders
    </select>

    <!-- 모든 주문 조회 -->
    <select id="list" resultType="Orders">
        SELECT 
            u.user_id AS userId,
            o.orders_no AS ordersNo,
            u.user_name AS userName,
            pu.user_name AS partnerName,
            pa.status AS status,
            pa.service_date AS serviceDate
        FROM 
            orders o
        JOIN 
            users u ON o.user_no = u.user_no
        JOIN 
            order_item oi ON o.orders_no = oi.orders_no
        JOIN 
            service s ON oi.service_no = s.service_no
        JOIN 
            partner p ON s.partner_no = p.partner_no
        JOIN 
            users pu ON p.user_no = pu.user_no
        JOIN
            payment pa ON pa.orders_no = o.orders_no
        LIMIT #{page.index}, #{page.rows}
    </select>

</mapper>