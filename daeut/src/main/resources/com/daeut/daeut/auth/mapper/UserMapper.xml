<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.daeut.daeut.auth.mapper.UserMapper">

    <resultMap type="Users" id="userMap">
        <id property="userNo" column="user_no" />
        
        <result property="userName" column="user_name" />
        <result property="userPhone" column="user_phone" />
        <result property="userBirth" column="user_birth" />
        <result property="userAddress" column="user_address" />
        <result property="userEmail" column="user_email" />
        <result property="userGender" column="user_gender" />
        <result property="userId" column="user_id" />
        <result property="userPassword" column="user_password" />
        <result property="userRegDate" column="user_reg_date" />
        <result property="userCoupon" column="user_coupon" />
        <result property="userUpdDate" column="user_upd_date" />
        <result property="enabled" column="enabled" />
        
        <collection property="authList" resultMap="authMap"></collection>
    </resultMap>

        
    <resultMap type="UserAuth" id="authMap">
        <result property="authNo" column="auth_no" />
        <result property="userNo" column="user_no" />
        <result property="auth" column="auth" />
    </resultMap>

    <!-- 로그인 - username -->
    <select id="login" resultMap="userMap">
        SELECT u.user_no
              ,u.user_name
              ,u.user_phone
              ,u.user_birth
              ,u.user_address
              ,u.user_email
              ,u.user_gender
              ,u.user_id
              ,u.user_password
              ,u.user_reg_date
              ,u.user_coupon
              ,u.user_upd_date
              ,enabled
              ,auth.auth
        FROM users u 
        LEFT OUTER JOIN user_auth auth ON u.user_no = auth.user_no
        WHERE u.user_id = #{userId}
    </select>

    <!-- 회원 조회 - id -->
    <select id="select" resultMap="userMap">
        SELECT u.user_no
              ,u.user_name
              ,u.user_phone
              ,u.user_birth
              ,u.user_address
              ,u.user_email
              ,u.user_gender
              ,u.user_id
              ,u.user_password
              ,u.user_reg_date
              ,u.user_coupon
              ,u.user_upd_date
              ,enabled
              ,auth.auth
        FROM users u 
        LEFT OUTER JOIN user_auth auth ON u.user_no = auth.user_no
        WHERE u.user_id = #{userId}
    </select>

    <!-- 이메일로 회원 조회 -->
    <select id="findUserByEmail" resultMap="userMap">
        SELECT u.user_no
              ,u.user_name
              ,u.user_phone
              ,u.user_birth
              ,u.user_address
              ,u.user_email
              ,u.user_gender
              ,u.user_id
              ,u.user_password
              ,u.user_reg_date
              ,u.user_coupon
              ,u.user_upd_date
              ,enabled
              ,auth.auth
        FROM users u 
        LEFT OUTER JOIN user_auth auth ON u.user_no = auth.user_no
        WHERE u.user_email = #{userEmail}
    </select>

    <!-- 회원 가입 -->
    <insert id="join" useGeneratedKeys="true" keyProperty="userNo">
        INSERT INTO users (user_name, user_phone, user_birth, user_address, user_email, user_gender, user_id, user_password, user_coupon)
        VALUES (#{userName}, #{userPhone}, #{userBirth}, #{userAddress}, #{userEmail}, #{userGender}, #{userId}, #{userPassword}, #{userCoupon})
    </insert>

    <!-- 회원 정보 수정 -->
    <update id="update">
        UPDATE users
           SET user_password = #{userPassword}
              ,user_name = #{userName}
              ,user_phone = #{userPhone}
              ,user_address = #{userAddress}
              ,user_birth = #{userBirth}
              ,user_upd_date = now()
        WHERE user_id = #{userId}
    </update>

    <!-- 회원 권한 등록 -->
    <insert id="insertAuth">
        INSERT INTO user_auth( user_no, auth )
        VALUES ( #{userNo}, #{auth} )
    </insert>

    <!-- 회원 삭제 -->
    <delete id="delete">
        DELETE FROM users
        WHERE user_no = #{userNo}
          AND user_id = #{userId}
    </delete>

    <!-- 파트너 신청 -->
    <update id="requestPartner">
        UPDATE users
        SET status = 1
        WHERE user_no = (SELECT user_no FROM users WHERE user_id = #{userId})
    </update>

    <insert id="insertPartner">
        INSERT INTO partner (partner_grade, partner_reserve, partner_career, introduce, user_no, file_path)
        VALUES (#{partner.partnerGrade}, #{partner.partnerReserve}, #{partner.partnerCareer}, #{partner.introduce}, #{userNo}, #{partner.filePath})
    </insert>

    <update id="updateUserStatus">
        UPDATE users
        SET status = 1
        WHERE user_no = #{userNo}
    </update>

    <select id="getUserById" resultType="Users">
        SELECT * FROM users WHERE user_id = #{userId}
    </select>


    <!-- 파트너 승인 -->
    <update id="approvePartner">
        UPDATE users
        SET status = 2
        WHERE user_no = (SELECT user_no FROM users WHERE user_id = #{userId})
    </update>

    <!-- 파트너 권한 추가 -->
    <insert id="insertPartnerAuth">
        INSERT INTO user_auth( user_no, auth )
        VALUES ( (SELECT user_no FROM users WHERE user_id = #{userId}), 'role_partner' )
    </insert>

    <!-- 파트너 신청 승인 처리 -->
    <update id="approvePartnerAndAddAuth">
        UPDATE users
        SET status = 2
        WHERE user_no = (SELECT user_no FROM users WHERE user_id = #{userId});
        
        INSERT INTO user_auth( user_no, auth )
        VALUES ( (SELECT user_no FROM users WHERE user_id = #{userId}), 'role_partner' );
    </update>

    <!-- 아이디 찾기 -->
    <select id="findUserByDetails" resultType="String">
        SELECT u.user_id
        FROM users u
        LEFT OUTER JOIN user_auth auth ON u.user_no = auth.user_no
        WHERE u.user_name = #{userName} AND u.user_email = #{userEmail} AND u.user_phone = #{userPhone}
    </select>

    <!-- 예약 가져오기 -->
    <select id="selectReservationsByUserId" resultType="Reservation">
        SELECT r.reservation_no, r.user_no, r.service_no, r.partner_no, r.reservation_status, r.order_no, r.total_quantity,
               r.total_price, r.reg_date, r.upd_date, r.cancel_no, 
               u.user_name, u.user_address, 
               pu.user_name AS partner_name, s.service_name
        FROM reservation r
        JOIN users u ON r.user_no = u.user_no
        JOIN partner p ON r.partner_no = p.partner_no
        JOIN users pu ON p.user_no = pu.user_no
        JOIN service s ON r.service_no = s.service_no
        WHERE u.user_id = #{userId}
    </select>


    <!-- ROLE_USER만 가진 사람 가져오기 - 관리자 페이지에서 회원 관리 -->
    <select id="selectAllUsers" resultType="Users">
        SELECT 
            a.user_no, a.user_name, a.user_phone, a.user_birth, a.user_address,
            a.user_email, a.user_gender, a.user_id, a.user_password, a.user_reg_date,
            a.user_coupon, a.user_upd_date, a.enabled, a.status
        FROM 
            users a
        WHERE 
            NOT EXISTS (
                SELECT 1 
                FROM user_auth b
                WHERE b.user_no = a.user_no 
                AND b.auth NOT IN "ROLE_USER"
            )

    <!-- 파트너정보 가져오기 -->
    <select id="selectPartner">
        SELECT partner.*
        FROM users
        INNER JOIN partner ON users.user_no = partner.user_no
        WHERE users.user_no = #{userId}

    </select>

    <!-- userNo 유저 찾기 -->
    <select id="selectByUserNo">
        select *
        from users
        WHERE user_no = #{userNo}
    </select>

    <!--유저 이름-->
    <select id="findByUsername">
    SELECT * FROM users WHERE username = #{username}
    </select>
    

</mapper>
