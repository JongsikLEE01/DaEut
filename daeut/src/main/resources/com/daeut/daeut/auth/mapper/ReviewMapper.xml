<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.daeut.daeut.auth.mapper.ReviewMapper">

    <select id="findPaymentsByUserNo" parameterType="int" resultType="com.daeut.daeut.reservation.dto.Payments">
        SELECT 
            p.payment_no AS paymentNo, 
            p.payment_method AS paymentMethod, 
            p.status, 
            p.pay_date AS payDate, 
            p.reg_date AS regDate, 
            p.upd_date AS updDate, 
            p.orders_no AS ordersNo, 
            p.service_date AS serviceDate,
            o.title AS title, 
            s.service_no AS serviceNo, 
            s.partner_no AS partnerNo
        FROM 
            payment p
        JOIN 
            orders o ON p.orders_no = o.orders_no
        JOIN 
            order_item oi ON o.orders_no = oi.orders_no
        JOIN 
            service s ON oi.service_no = s.service_no
        WHERE 
            o.user_no = #{userNo}
    </select>


    <select id="getPaymentDetails" parameterType="int" resultType="com.daeut.daeut.reservation.dto.Payments">
        SELECT 
            p.payment_no AS paymentNo, 
            p.payment_method AS paymentMethod, 
            p.status, 
            p.pay_date AS payDate, 
            p.reg_date AS regDate, 
            p.upd_date AS updDate, 
            p.orders_no AS ordersNo, 
            p.service_date AS serviceDate,
            o.title AS title, 
            s.service_no AS serviceNo, 
            s.partner_no AS partnerNo
        FROM 
            payment p
        JOIN 
            orders o ON p.orders_no = o.orders_no
        JOIN 
            order_item oi ON o.orders_no = oi.orders_no
        JOIN 
            service s ON oi.service_no = s.service_no
        WHERE 
            p.payment_no = #{paymentNo}
    </select>


    <insert id="insertReview" parameterType="com.daeut.daeut.auth.dto.Review">
        INSERT INTO review (review_title, review_content, review_reg_date, review_rating, user_no, payment_no, partner_no, service_no)
        VALUES (#{reviewTitle}, #{reviewContent}, NOW(), #{reviewRating}, #{userNo}, #{paymentNo}, #{partnerNo}, #{serviceNo})
    </insert>

    <!--serviceNo로 리뷰 정보 가져오기-->
    <select id="getReviewByServiceNo">
        SELECT
            r.*,
            u.user_name
        FROM
            review r
        INNER JOIN
            users u ON r.user_no = u.user_no
        WHERE
            r.service_no = #{serviceNo};
    </select>

    <!-- 리뷰no로 리뷰 정보 가져오기-->
    <select id="getReviewByReviewNo">
        SELECT *
        FROM review
        where review_no = #{reviewNo}
    </select>

    <!--service_no로 리뷰의 파일 정보를 가져와야 하는데.-->
    <!-- <select id="getFileByServiceNum">
            SELECT
            r.*,
            f.*
        FROM
            review r
        INNER JOIN
            users u ON r.user_no = u.user_no
        LEFT JOIN (
            SELECT *
            FROM files
            WHERE parent_table = 'review'
        ) f ON r.review_no = f.parent_no
        WHERE r.service_no = #{serviceNo};
    </select> -->

    <select id="maxPk" resultType="int">
        SELECT COALESCE(MAX(review_no), 0)
        FROM review
    </select>

    <!--평균값 계산-->
    <select id="getAverageRatingByServiceNo">
       SELECT ROUND(COALESCE(AVG(review_rating), 0)) AS average_rating
        FROM review
        WHERE service_no = #{serviceNo}
    </select>


</mapper>
